-- Chap 25 in PIL.

--#include <stdio.h>
--#include <string.h>
--#include "lua.h"
--#include "lauxlib.h"
--#include "lualib.h"
--int main (void) {
--  char buff[256];
--  int error;
--  lua_State *L = luaL_newstate(); /* opens Lua */
--  luaL_openlibs(L); /* opens the standard libraries */
--  while (fgets(buff, sizeof(buff), stdin) != NULL) {
--    error = luaL_loadstring(L, buff) || lua_pcall(L, 0, 0, 0);
--    if (error) {
--      fprintf(stderr, "%s\n", lua_tostring(L, -1));
--      lua_pop(L, 1); /* pop error message from the stack */
--     }
--  }
--  lua_close(L);
--  return 0;
--}
--
--#include <stdarg.h>
--#include <stdio.h>
--#include <stdlib.h>
--void error (lua_State *L, const char *fmt, ...) {
--  va_list argp;
--  va_start(argp, fmt);
--  vfprintf(stderr, fmt, argp);
--  va_end(argp);
--  lua_close(L);
--  exit(EXIT_FAILURE);
--}


--static void stackDump (lua_State *L) {
--  int i;
--  int top = lua_gettop(L); /* depth of the stack */
--  for (i = 1; i <= top; i++) { /* repeat for each level */
--    int t = lua_type(L, i);
--    switch (t) {
--      case LUA_TSTRING: { /* strings */
--        printf("'%s'", lua_tostring(L, i));
--        break;
--      }
--      case LUA_TBOOLEAN: { /* booleans */
--        printf(lua_toboolean(L, i) ? "true" : "false");
--        break;
--      }
--      case LUA_TNUMBER: { /* numbers */
--        printf("%g", lua_tonumber(L, i));
--        break;
--      }
--      default: { /* other values */
--        printf("%s", lua_typename(L, t));
--        break;
--      }
--    }
--    printf(" "); /* put a separator */
--  }
--  printf("\n"); /* end the listing */
--}
--
--#include <stdio.h>
--#include "lua.h"
--#include "lauxlib.h"
--
--static void stackDump (lua_State *L) {
--  <as in Listing 25.2>
--}
--
--int main (void) {
--  lua_State *L = luaL_newstate();
--  lua_pushboolean(L, 1);
--  lua_pushnumber(L, 10);
--  lua_pushnil(L);
--  lua_pushstring(L, "hello");
--  stackDump(L);
--  /* true 10 nil 'hello' */
--  lua_pushvalue(L, -4); stackDump(L);
--  /* true 10 nil 'hello' true */
--  lua_replace(L, 3); stackDump(L);
--  /* true 10 true 'hello' */
--  lua_settop(L, 6); stackDump(L);
--  /* true 10 true 'hello' nil nil */
--  lua_remove(L, -3); stackDump(L);
--  /* true 10 true nil nil */
--  lua_settop(L, -5); stackDump(L);
--  /* true */
--  lua_close(L);
--  return 0;
--}